{"version":3,"sources":["eo.js"],"names":[],"mappings":"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","file":"eo-babelled.js","sourcesContent":["const objectType = '[object Object]',\r\n  arrayType = '[object Array]',\r\n  dateType = '[object Date]';\r\n\r\n// Zwraca typ danych wysłanych do funkcji w formacie '[object typ]'.\r\nexport const dataType = val => {\r\n  return Object.prototype.toString.call(val);\r\n};\r\n\r\n// Sprawdza czy wartoć jest obiektem, jeli jest wypluwa true. Drugi argument pozwala wykluczyć wybrane obiekty.\r\nexport const isObject = (val, ...config) => {\r\n  if (!val) throw 'No arg passed to \"isObject\" func.';\r\n  if (config.length > 0) {\r\n    if (val !== Object(val)) return false;\r\n    for (let i = 0; i < config.length; i++) {\r\n      if (is(val, config[i])) return false;\r\n    }\r\n    return true;\r\n  } else {\r\n    return val === Object(val);\r\n  }\r\n};\r\n\r\n//Sprawdza czy wartosc podana jako pierwszy argument jest typu podanego w drugim argumencie.\r\nexport const is = (val, type) => {\r\n  if (!type || !val) throw 'No arg passed to \"is\" function.';\r\n  type = type[0].toUpperCase() + type.slice(1).toLowerCase();\r\n  const optList = [\r\n    'Object',\r\n    'Array',\r\n    'Function',\r\n    'Date',\r\n    'RegExp',\r\n    'String',\r\n    'Number',\r\n    'Boolean',\r\n    'Error',\r\n    'Math',\r\n    'JSON',\r\n    'Arguments'\r\n  ];\r\n  if (!optList.includes(type))\r\n    throw `Wrong argument \"${type}\" passed to \"is\" function. Available arguments: \"${optList}\"`;\r\n  return dataType(val) === `[object ${type}]`;\r\n};\r\n\r\n// Zwraca nową instancję zmiennej przesłanej jako argument.\r\nexport const clone = val => {\r\n  if (!val) throw 'No arg passed to \"clone\" func.';\r\n  switch (dataType(val)) {\r\n    case objectType:\r\n      return Object.assign({}, val);\r\n    case arrayType:\r\n      return [...val];\r\n    case dateType:\r\n      return new Date(val.valueOf());\r\n    default:\r\n      return val;\r\n  }\r\n};\r\n\r\n// Wykonuje głębokie klonowanie zmiennej przesłanej jako argument.\r\nexport const cloneDeep = val => {\r\n  if (!val) throw 'No arg passed to \"cloneDeep\" func.';\r\n  let newVal = clone(val);\r\n  switch (dataType(newVal)) {\r\n    case objectType:\r\n      for (const prop in newVal) {\r\n        if (\r\n          dataType(newVal[prop]) === objectType ||\r\n          dataType(newVal[prop]) === arrayType\r\n        ) {\r\n          newVal[prop] = cloneDeep(newVal[prop]);\r\n        }\r\n      }\r\n      return newVal;\r\n    case arrayType:\r\n      newVal.forEach((el, id) => {\r\n        if (dataType(el) === objectType || dataType(el) === arrayType) {\r\n          newVal[id] = cloneDeep(el);\r\n        }\r\n      });\r\n      return newVal;\r\n    default:\r\n      return newVal;\r\n  }\r\n};\r\n\r\n// Porównuje dwie wartosci wysłane w argumentach i jesli są równe wypluwa true. Radzi sobie z prymitywami, tablicami, obiektami i datami.\r\nexport const isEqual = (val1, val2) => {\r\n  if (!val1 || !val2) throw 'No arg passed to \"isEqual\" func.';\r\n  if (dataType(val1) !== dataType(val2))\r\n    throw 'Arguments passed to isEqual func are different types.';\r\n  if (val1 === val2) {\r\n    return true;\r\n  }\r\n  switch (dataType(val1)) {\r\n    case objectType:\r\n      if (Object.keys(val1).length !== Object.keys(val2).length) return false;\r\n      for (const prop in val1) {\r\n        if (!val2.hasOwnProperty(prop)) return false;\r\n        if (\r\n          dataType(val1[prop]) === objectType ||\r\n          dataType(val1[prop]) === arrayType\r\n        ) {\r\n          if (isEqual(val1[prop], val2[prop])) {\r\n            continue;\r\n          } else {\r\n            return false;\r\n          }\r\n        }\r\n        if (val1[prop] !== val2[prop]) return false;\r\n      }\r\n      return true;\r\n    case arrayType:\r\n      if (val1.length !== val2.length) return false;\r\n      for (let i = 0; i < val1.length; i++) {\r\n        if (\r\n          dataType(val1[i]) === objectType ||\r\n          dataType(val1[i]) === arrayType\r\n        ) {\r\n          if (isEqual(val1[i], val2[i])) {\r\n            continue;\r\n          } else {\r\n            return false;\r\n          }\r\n        }\r\n        if (val1[i] !== val2[i]) return false;\r\n      }\r\n      return true;\r\n    case dateType:\r\n      if (val1.getTime() === val2.getTime()) return true;\r\n      else return false;\r\n    default:\r\n      throw 'Wrong argument type passed to isEqual Func';\r\n  }\r\n};\r\n\r\n/* export const findAndChange = (arr, find, changeTo) => {\r\n  const newArr = arr.map(el => {\r\n    let newEl;\r\n    isObject(el) ? (newEl = Object.assign({}, el)) : (newEl = el);\r\n  });\r\n}; */\r\n\r\nconst lib = {\r\n  isObject: isObject(val, ...config),\r\n  is: is(val, type),\r\n  dataType: dataType(val),\r\n  clone: clone(val),\r\n  cloneDeep: cloneDeep(val),\r\n  isEqual: isEqual(val1, val2)\r\n};\r\n\r\nexport default lib;\r\n"]}